# -------------------------------------------------------------------------------
# The Emoji Engine — MetaKarma Hub Ultimate Mega-Agent v5.16+
#
# Copyright (c) 2023-2026 mimi, taha & supernova
#
# Powered by humans & machines hand in hand — remixing creativity, karma & cosmos.
# Special shoutout to Gemini, Google Gemini, OpenAI GPT & Anthropic Cloud
# — the stellar trio that helped spark this cosmic project 🚀✨
#
# MIT License — remix, fork, evolve, connect your universe.
# -------------------------------------------------------------------------------

"""
Welcome to MetaKarma Hub! 🌌✨🎮

The ultimate legoblock core for building boundless multiverses — each a remix republic shaped by you.

🧩 Modular, scalable, immutable, and open.

Every citizen starts with one root coin — the spark of creation 🔥,
whether human or decentralized AI agent, each with independent karma potential.

Mint fractional coins as legos to remix, improve, and innovate endlessly.
Trade fractional ownership on a marketplace to monetize your remix republic.

Reactions flow coin value through cosmic veins,
shared fairly between original creators, reactors (interactors), and treasury — communal light 💎.

Karma is a separate reputation currency unlocking minting and voting power.

Governance is truly multi-species: humans, AI, others,
each voice equal by default,
with voting weights dynamically normalized:
- Two species: 50/50 split
- Three or more: evenly split (~33% each)
Super-majority approval threshold is set to 70% to encourage meaningful consensus.

Value exchange flows through emojis, amplifying social influence and economic dynamics without politics.

The Vaccine adapts, blocking evolving threats 🛡️ with governance-overseen pattern updates.

Hooks plug into Discord, Unreal, AI agents — you name it. Play on.

No politics, no divisiveness. Pure remix magic.

Join us. Remix reality. Build universes.

─────────────────────────────────────────────
"""

import sys
import json
import uuid
import datetime
import hashlib
import threading
import base64
import re
import logging
import time
from collections import defaultdict, deque
from decimal import Decimal, getcontext, InvalidOperation
from typing import Optional, Dict, List, Any, Callable

getcontext().prec = 28
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s: %(message)s')

def acquire_agent_lock(func):
    def wrapper(self, *args, **kwargs):
        with self.lock:
            return func(self, *args, **kwargs)
    return wrapper

class Config:
    _lock = threading.RLock()
    VERSION = "EmojiEngine UltimateMegaAgent v5.16+"
    GENESIS_COIN_INITIAL_VALUE = Decimal('1E6')
    FRACTIONAL_COIN_MIN_VALUE = Decimal('1000')
    GENESIS_FADE_YEARS = Decimal('10')
    GENESIS_MULTIPLIER = Decimal('2')
    DAILY_DECAY = Decimal('0.99')
    VIRAL_DECAY = Decimal('0.95')
    TREASURY_SHARE = Decimal('0.3333333333333333333333333333')
    TREASURY_ACTIVE_ALLOCATION_PCT = Decimal('0.02')
    MARKET_FEE = Decimal('0.01')
    MAX_FRACTION_START = Decimal('0.10')
    MAX_FRACTION_MAX = Decimal('0.30')
    MAX_LOG = 150_000
    MAX_MINTS_PER_DAY = 5
    MAX_REACTS_PER_MINUTE = 30
    MIN_IMPROVEMENT_LEN = 15
    GOV_SUPERMAJORITY_THRESHOLD = Decimal('0.70')
    NETWORK_BONUS_EXPONENT = Decimal('0.5')
    PROPOSAL_VOTE_DURATION_HOURS = 72
    KARMA_MINT_THRESHOLD = Decimal('200000')
    ALLOWED_POLICY_KEYS = {
        "MARKET_FEE": lambda v: Decimal(v) >= 0 and Decimal(v) <= Decimal('0.10'),
        "DAILY_DECAY": lambda v: Decimal('0.90') <= Decimal(v) <= Decimal('1'),
        "KARMA_MINT_THRESHOLD": lambda v: Decimal(v) >= 0,
    }
    VAX_PATTERNS = {
        "critical": [r"\bhack\b", r"\bmalware\b", r"\bransomware\b", r"\bbackdoor\b", r"\bexploit\b"],
        "high": [r"\bphish\b", r"\bddos\b", r"\bspyware\b", r"\brootkit\b", r"\bkeylogger\b", r"\bbotnet\b"],
        "medium": [r"\bpropaganda\b", r"\bsurveillance\b", r"\bmanipulate\b"],
        "low": [r"\bspam\b", r"\bscam\b", r"\bviagra\b"],
    }
    EMOJI_BASE = {
        "🤗": Decimal('7'), "🥰": Decimal('5'), "😍": Decimal('5'), "🔥": Decimal('4'),
        "🫶": Decimal('4'), "🌸": Decimal('3'), "💯": Decimal('3'), "🎉": Decimal('3'),
        "✨": Decimal('3'), "🙌": Decimal('3'), "🎨": Decimal('3'), "💬": Decimal('3'),
        "👍": Decimal('2'), "🚀": Decimal('2.5'), "💎": Decimal('6'), "🌟": Decimal('3'),
        "⚡": Decimal('2.5'), "👀": Decimal('0.5'), "🥲": Decimal('0.2'), "🤷‍♂️": Decimal('2'),
        "😅": Decimal('2'), "🔀": Decimal('4'), "🆕": Decimal('3'), "🔗": Decimal('2'), "❤️": Decimal('4'),
    }

    @classmethod
    def update_policy(cls, key: str, value: Any):
        with cls._lock:
            if key not in cls.ALLOWED_POLICY_KEYS:
                raise InvalidInputError(f"Policy key '{key}' not allowed")
            if not cls.ALLOWED_POLICY_KEYS[key](value):
                raise InvalidInputError(f"Policy value '{value}' invalid for key '{key}'")
            setattr(cls, key, Decimal(value))
            logging.info(f"Policy '{key}' updated to {value}")

def now_utc() -> datetime.datetime:
    return datetime.datetime.now(datetime.timezone.utc)

def ts() -> str:
    return now_utc().isoformat()

def sha(data: str) -> str:
    return base64.b64encode(hashlib.sha256(data.encode('utf-8')).digest()).decode()

def today() -> str:
    return now_utc().date().isoformat()

def safe_divide(a: Decimal, b: Decimal, default=Decimal('0')) -> Decimal:
    try:
        return a / b if b != 0 else default
    except (InvalidOperation, ZeroDivisionError):
        return default

def is_valid_username(name: str) -> bool:
    return bool(re.fullmatch(r'[A-Za-z0-9_]{3,30}', name))

def is_valid_emoji(emoji: str) -> bool:
    return emoji in Config.EMOJI_BASE

class UserExistsError(Exception): pass
class ConsentError(Exception): pass
class KarmaError(Exception): pass
class BlockedContentError(Exception): pass
class CoinDepletedError(Exception): pass
class RateLimitError(Exception): pass
class ImprovementRequiredError(Exception): pass
class EmojiRequiredError(Exception): pass
class TradeError(Exception): pass
class VoteError(Exception): pass
class InvalidInputError(Exception): pass
class RootCoinMissingError(InvalidInputError): pass
class InsufficientFundsError(Exception): pass
class InvalidPercentageError(Exception): pass

class Vaccine:
    def __init__(self):
        self.lock = threading.RLock()
        self.block_counts = defaultdict(int)
        self.compiled_patterns = {}
        for lvl, pats in Config.VAX_PATTERNS.items():
            compiled = []
            for p in pats:
                try:
                    compiled.append(re.compile(p))
                except re.error as e:
                    logging.error(f"Invalid regex '{p}' level '{lvl}': {e}")
            self.compiled_patterns[lvl] = compiled

    def scan(self, text: str) -> bool:
        if not isinstance(text, str):
            return True
        t = text.lower()
        with self.lock:
            for lvl, pats in self.compiled_patterns.items():
                for pat in pats:
                    if pat.search(t):
                        self.block_counts[lvl] += 1
                        try:
                            with open("vaccine.log", "a", encoding="utf-8") as f:
                                f.write(json.dumps({
                                    "ts": ts(),
                                    "nonce": uuid.uuid4().hex,
                                    "level": lvl,
                                    "pattern": pat.pattern,
                                    "snippet": text[:80]
                                }) + "\n")
                        except (FileNotFoundError, PermissionError) as e:
                            logging.error(f"File error writing vaccine.log: {e}")
                        except Exception as e:
                            logging.error(f"Unexpected error writing vaccine.log: {e}")
                        logging.warning(f"Vaccine blocked '{pat.pattern}' level '{lvl}': '{text[:50]}...'")
                        return False
        return True

class LogChain:
    def __init__(self, filename="logchain.log", maxlen=Config.MAX_LOG):
        self.filename = filename
        self.lock = threading.RLock()
        self.entries = deque(maxlen=maxlen)
        self._load()

    def _load(self):
        try:
            with open(self.filename, "r", encoding="utf-8") as f:
                for line in f:
                    self.entries.append(line.strip())
            logging.info(f"Loaded {len(self.entries)} audit entries")
        except FileNotFoundError:
            logging.info("No audit log found, starting fresh")

    def add(self, event: Dict[str, Any]) -> None:
        event["nonce"] = uuid.uuid4().hex
        event["timestamp"] = ts()
        json_event = json.dumps(event, sort_keys=True, default=str)
        with self.lock:
            prev_hash = self.entries[-1].split("||")[-1] if self.entries else ""
            new_hash = sha(prev_hash + json_event)
            entry_line = json_event + "||" + new_hash
            self.entries.append(entry_line)
            try:
                with open(self.filename, "a", encoding="utf-8") as f:
                    f.write(entry_line + "\n")
                    f.flush()
            except IOError as e:
                logging.error(f"Failed to write audit log: {e}")

    def verify(self) -> bool:
        prev_hash = ""
        for line in self.entries:
            try:
                event_json, h = line.split("||")
            except ValueError:
                logging.error("Malformed audit log line")
                return False
            if sha(prev_hash + event_json) != h:
                logging.error("Audit log hash mismatch")
                return False
            prev_hash = h
        return True

class User:
    def __init__(self, name: str, genesis: bool = False, species: str = "human"):
        self.name = name
        self.is_genesis = genesis
        self.species = species
        self.consent = True
        self.karma = Decimal('0')
        self.join_time = now_utc()
        self.last_active = self.join_time
        self.mint_count = 0
        self.next_mint_threshold = Config.KARMA_MINT_THRESHOLD
        self.root_coin_id: Optional[str] = None
        self.coins_owned: List[str] = []
        self.daily_actions: Dict[str, Dict[str, int]] = defaultdict(lambda: defaultdict(int))
        self._last_action_day: Optional[str] = today()
        self._reaction_timestamps: deque = deque()
        self.lock = threading.RLock()
        self.initial_root_value: Optional[Decimal] = None

    def add_karma(self, amount: Decimal):
        with self.lock:
            self.karma += amount

    def reset_daily_if_needed(self):
        today_str = today()
        with self.lock:
            if self._last_action_day != today_str:
                self.daily_actions.clear()
                self._last_action_day = today_str
                self._reaction_timestamps.clear()

    def check_reaction_rate_limit(self) -> bool:
        now_ts = now_utc().timestamp()
        with self.lock:
            while self._reaction_timestamps and now_ts - self._reaction_timestamps[0] > 60:
                self._reaction_timestamps.popleft()
            if len(self._reaction_timestamps) >= Config.MAX_REACTS_PER_MINUTE:
                return False
            self._reaction_timestamps.append(now_ts)
            return True

    def check_mint_rate_limit(self) -> bool:
        self.reset_daily_if_needed()
        with self.lock:
            return self.daily_actions[today()].get("mint", 0) < Config.MAX_MINTS_PER_DAY

    def apply_daily_karma_decay(self):
        now_dt = now_utc()
        inactive_days = (now_dt - self.last_active).days
        if inactive_days > 7:
            decay_factor = Config.DAILY_DECAY ** (inactive_days - 7)
            with self.lock:
                old_karma = self.karma
                self.karma *= decay_factor
                if old_karma != self.karma:
                    logging.info(f"Applied karma decay to user {self.name}: {old_karma} -> {self.karma}")

    def to_dict(self):
        with self.lock:
            return {
                "name": self.name,
                "is_genesis": self.is_genesis,
                "species": self.species,
                "consent": self.consent,
                "karma": str(self.karma),
                "join_time": self.join_time.isoformat(),
                "last_active": self.last_active.isoformat(),
                "mint_count": self.mint_count,
                "next_mint_threshold": str(self.next_mint_threshold),
                "root_coin_id": self.root_coin_id,
                "coins_owned": self.coins_owned[:],
                "daily_actions": {k: dict(v) for k, v in self.daily_actions.items()},
                "_last_action_day": self._last_action_day,
                "_reaction_timestamps": list(self._reaction_timestamps),
                "initial_root_value": str(self.initial_root_value) if self.initial_root_value else None,
            }

    @classmethod
    def from_dict(cls, data):
        user = cls(data["name"], data.get("is_genesis", False), data.get("species", "human"))
        user.consent = data.get("consent", True)
        user.karma = Decimal(data.get("karma", '0'))
        user.join_time = datetime.datetime.fromisoformat(data.get("join_time"))
        user.last_active = datetime.datetime.fromisoformat(data.get("last_active"))
        user.mint_count = data.get("mint_count", 0)
        user.next_mint_threshold = Decimal(data.get("next_mint_threshold", Config.KARMA_MINT_THRESHOLD))
        user.root_coin_id = data.get("root_coin_id")
        user.coins_owned = data.get("coins_owned", [])
        user.daily_actions = defaultdict(lambda: defaultdict(int), {k: defaultdict(int, v) for k, v in data.get("daily_actions", {}).items()})
        user._last_action_day = data.get("_last_action_day", today())
        user._reaction_timestamps = deque(data.get("_reaction_timestamps", []))
        user.initial_root_value = Decimal(data.get("initial_root_value")) if data.get("initial_root_value") else None
        return user

class Coin:
    def __init__(self, coin_id: str, creator: str, owner: str, value: Decimal,
                 is_root: bool = False, fractional_of: Optional[str] = None,
                 fractional_pct: Decimal = Decimal('0'), references: Optional[List[Dict]] = None,
                 improvement: Optional[str] = None, genesis_creator: Optional[str] = None):
        self.coin_id = coin_id
        self.creator = creator
        self.owner = owner
        self.value = value
        self.is_root = is_root
        self.fractional_of = fractional_of
        self.fractional_pct = fractional_pct
        self.references = references or []
        self.improvement = improvement or ""
        self.ancestors: List[str] = []
        self.reactions: List[Dict] = []
        self.created_at = ts()
        self.genesis_creator = genesis_creator or (creator if is_root else None)

    def decrease_value(self, amount: Decimal):
        if self.value < amount:
            raise CoinDepletedError(f"Coin {self.coin_id} value depleted by {amount}")
        self.value -= amount

    def to_dict(self):
        return {
            "coin_id": self.coin_id,
            "creator": self.creator,
            "owner": self.owner,
            "value": str(self.value),
            "is_root": self.is_root,
            "fractional_of": self.fractional_of,
            "fractional_pct": str(self.fractional_pct),
            "references": self.references,
            "improvement": self.improvement,
            "ancestors": self.ancestors[:],
            "reactions": self.reactions[:],
            "created_at": self.created_at,
            "genesis_creator": self.genesis_creator,
        }

    @classmethod
    def from_dict(cls, data):
        coin = cls(
            data["coin_id"], data["creator"], data["owner"], Decimal(data["value"]),
            data.get("is_root", False), data.get("fractional_of"), Decimal(data.get("fractional_pct", '0')),
            data.get("references"), data.get("improvement"), data.get("genesis_creator")
        )
        coin.ancestors = data.get("ancestors", [])
        coin.reactions = data.get("reactions", [])
        coin.created_at = data.get("created_at", ts())
        return coin

class EmojiMarket:
    def __init__(self):
        self.lock = threading.RLock()
        self.market = {e: {"uses": Decimal('1'), "karma": Decimal(w), "weight": Decimal(w)} for e, w in Config.EMOJI_BASE.items()}

    def update_weight(self, emoji: str, karma_delta: Decimal):
        with self.lock:
            em = self.market.setdefault(emoji, {"uses": Decimal('0'), "karma": Decimal('0'), "weight": Decimal('1')})
            em["uses"] += 1
            em["karma"] += karma_delta
            alpha = Decimal('0.1')
            em["weight"] = alpha * (em["karma"] / em["uses"]) + (Decimal('1') - alpha) * em["weight"]

    def get_weight(self, emoji: str) -> Decimal:
        with self.lock:
            return self.market.get(emoji, {"weight": Decimal('1')})["weight"]

    def to_dict(self):
        with self.lock:
            return {e: {k: str(v) if isinstance(v, Decimal) else v for k, v in val.items()} for e, val in self.market.items()}

    @classmethod
    def from_dict(cls, data):
        em = cls()
        with em.lock:
            em.market = {e: {k: Decimal(v) if k != 'weight' else v for k, v in val.items()} for e, val in data.items()}
        return em

class HookManager:
    def __init__(self):
        self._hooks = defaultdict(list)
        self.lock = threading.RLock()

    def register_hook(self, event_name: str, callback: Callable):
        with self.lock:
            self._hooks[event_name].append(callback)
            logging.info(f"Hook registered for event '{event_name}'")

    def fire_hooks(self, event_name: str, *args, **kwargs):
        with self.lock:
            callbacks = list(self._hooks.get(event_name, []))
        for cb in callbacks:
            try:
                cb(*args, **kwargs)
            except Exception as e:
                logging.error(f"Error in hook '{event_name}': {e}")

class Proposal:
    def __init__(self, proposal_id: str, creator: str, description: str, target: str, payload: dict):
        self.proposal_id = proposal_id
        self.creator = creator
        self.description = description
        self.target = target
        self.payload = payload
        self.created_at = ts()
        self.votes = {}
        self.status = "open"

    def is_expired(self) -> bool:
        created_dt = datetime.datetime.fromisoformat(self.created_at)
        return (now_utc() - created_dt).total_seconds() > Config.PROPOSAL_VOTE_DURATION_HOURS * 3600

    def tally_votes(self, users: Dict[str, User]) -> Dict[str, Decimal]:
        species_count = defaultdict(set)
        for uname in self.votes:
            user = users.get(uname)
            if user:
                species_count[user.species].add(uname)

        total_species = len(species_count)
        if total_species == 0:
            return {"yes": Decimal('0'), "no": Decimal('0'), "total": Decimal('0')}

        species_weight = {s: Decimal('1') / Decimal(total_species) for s in species_count}
        yes_weight = Decimal('0')
        no_weight = Decimal('0')

        for species, voters in species_count.items():
            karma_yes = Decimal('0')
            karma_no = Decimal('0')
            total_karma = sum(users[v].karma for v in voters) or Decimal('1')

            for v in voters:
                vote = self.votes.get(v)
                if vote == "yes":
                    karma_yes += users[v].karma
                elif vote == "no":
                    karma_no += users[v].karma

            yes_weight += species_weight[species] * (karma_yes / total_karma)
            no_weight += species_weight[species] * (karma_no / total_karma)

        total_votes = yes_weight + no_weight
        return {"yes": yes_weight, "no": no_weight, "total": total_votes}

    def is_approved(self, users: Dict[str, User]) -> bool:
        tally = self.tally_votes(users)
        if tally["total"] == 0:
            return False
        return tally["yes"] / tally["total"] >= Config.GOV_SUPERMAJORITY_THRESHOLD

    def to_dict(self):
        return {
            "proposal_id": self.proposal_id,
            "creator": self.creator,
            "description": self.description,
            "target": self.target,
            "payload": self.payload,
            "created_at": self.created_at,
            "votes": self.votes.copy(),
            "status": self.status,
        }

    @classmethod
    def from_dict(cls, data):
        proposal = cls(
            data["proposal_id"], data["creator"], data["description"], data["target"], data["payload"]
        )
        proposal.created_at = data.get("created_at", ts())
        proposal.votes = data.get("votes", {})
        proposal.status = data.get("status", "open")
        return proposal

class RemixAgent:
    def __init__(self, snapshot_file: str = "snapshot.json", logchain_file: str = "logchain.log"):
        self.vaccine = Vaccine()
        self.logchain = LogChain(filename=logchain_file)
        self.users: Dict[str, User] = {}
        self.coins: Dict[str, Coin] = {}
        self.proposals: Dict[str, Proposal] = {}
        self.treasury = Decimal('0')
        self.treasury_active_fund = Decimal('0')
        self.emoji_market = EmojiMarket()
        self.hooks = HookManager()
        self.lock = threading.RLock()
        self.snapshot_file = snapshot_file
        self._last_decay_day: Optional[str] = None
        self._last_proposal_check: Optional[datetime.datetime] = None
        self.marketplace_listings: Dict[str, Dict[str, Any]] = {}
        self.load_state()

    def _do_add_user(self, name, is_genesis, species, karma, join_time, last_active, root_coin_id, coins_owned, initial_root_value, consent, root_coin_value):
        user = User(name, is_genesis, species)
        user.consent = consent
        user.karma = karma
        user.join_time = join_time
        user.last_active = last_active
        user.root_coin_id = root_coin_id
        user.coins_owned = coins_owned
        user.initial_root_value = initial_root_value
        self.users[name] = user
        coin = Coin(root_coin_id, name, name, root_coin_value, True, genesis_creator=name)
        self.coins[root_coin_id] = coin

    def _do_mint_coin(self, user_name, new_coin_id, mint_value, new_coin_value,
                      root_coin_id, genesis_creator, references,
                      improvement, fractional_pct, ancestors, created_at):
        user = self.users[user_name]
        root_coin = self.coins[root_coin_id]
        new_coin = Coin(
            coin_id=new_coin_id,
            creator=root_coin.creator,
            owner=user_name,
            value=new_coin_value,
            is_root=False,
            fractional_of=root_coin_id,
            fractional_pct=fractional_pct,
            references=references,
            improvement=improvement,
            genesis_creator=genesis_creator
        )
        new_coin.ancestors = ancestors
        new_coin.created_at = created_at
        self.coins[new_coin_id] = new_coin
        root_coin.value -= mint_value
        split_value = mint_value * Config.TREASURY_SHARE
        creator_user = self.users.get(genesis_creator)
        if creator_user and creator_user.root_coin_id and creator_user.root_coin_id in self.coins:
            creator_root_coin = self.coins[creator_user.root_coin_id]
            creator_root_coin.value += split_value
        else:
            root_coin.value += split_value
        self.treasury += split_value
        user.coins_owned.append(new_coin_id)
        user.mint_count += 1
        user.next_mint_threshold = max(user.next_mint_threshold / 2, Config.FRACTIONAL_COIN_MIN_VALUE)
        user.last_active = datetime.datetime.fromisoformat(created_at)

    def _do_react_to_coin(self, reactor, coin_id, emoji, message,
                          coin_value_reactor, coin_value_creator,
                          coin_value_treasury, viral_decay, emoji_weight_used,
                          network_bonus, decay_factor_used, timestamp):
        reactor_user = self.users[reactor]
        coin = self.coins[coin_id]
        self.emoji_market.update_weight(emoji, coin_value_creator)
        coin.reactions.append({"reactor": reactor, "emoji": emoji, "message": message, "timestamp": timestamp})
        reactor_user.last_active = datetime.datetime.fromisoformat(timestamp)
        user_root_coin = self.coins.get(reactor_user.root_coin_id)
        if user_root_coin:
            user_root_coin.value += coin_value_reactor
        else:
            coin.value += coin_value_reactor
        creator_user = self.users.get(coin.genesis_creator)
        if creator_user and creator_user.root_coin_id and creator_user.root_coin_id in self.coins:
            creator_coin = self.coins[creator_user.root_coin_id]
            creator_coin.value += coin_value_creator
        else:
            coin.value += coin_value_creator
        self.treasury += coin_value_treasury

    def _do_list_coin_for_sale(self, listing_id, seller, coin_id, price, created_at):
        self.marketplace_listings[listing_id] = {
            "listing_id": listing_id,
            "seller": seller,
            "coin_id": coin_id,
            "price": price,
            "status": "active",
            "created_at": created_at,
        }

    def _do_buy_coin(self, buyer, seller, coin_id, price, fee_amount, listing_id, sold_at):
        buyer_user = self.users[buyer]
        seller_user = self.users[seller]
        coin = self.coins[coin_id]
        buyer_root_coin = self.coins[buyer_user.root_coin_id]
        buyer_root_coin.value -= (price + fee_amount)
        seller_root_coin = self.coins[seller_user.root_coin_id]
        seller_root_coin.value += price
        self.treasury += fee_amount
        coin.owner = buyer
        if coin_id in seller_user.coins_owned:
            seller_user.coins_owned.remove(coin_id)
        if coin_id not in buyer_user.coins_owned:
            buyer_user.coins_owned.append(coin_id)
        listing = self.marketplace_listings[listing_id]
        listing["status"] = "sold"
        listing["buyer"] = buyer
        listing["sold_at"] = sold_at

    def _do_transfer_coin(self, from_user, to_user, coin_id):
        sender = self.users[from_user]
        receiver = self.users[to_user]
        coin = self.coins[coin_id]
        coin.owner = to_user
        if coin_id in sender.coins_owned:
            sender.coins_owned.remove(coin_id)
        if coin_id not in receiver.coins_owned:
            receiver.coins_owned.append(coin_id)

    @acquire_agent_lock
    def add_user(self, name: str, genesis: bool = False, species: str = "human") -> User:
        if not is_valid_username(name):
            raise InvalidInputError(f"Invalid username format: '{name}'")
        if name in self.users:
            raise UserExistsError(f"User '{name}' exists")
        coin_id = uuid.uuid4().hex
        join_time = now_utc()
        root_value = Config.GENESIS_COIN_INITIAL_VALUE if genesis else Decimal('0')
        event = {
            "event": "ADD_USER",
            "user": name,
            "genesis": genesis,
            "species": species,
            "karma": "0",
            "coin_id": coin_id,
            "coins_owned": [],
            "initial_root_value": str(root_value),
            "consent": True,
            "root_value": str(root_value),
            "ts": ts(),
        }
        self.logchain.add(event)
        self._do_add_user(name, genesis, species, Decimal('0'), join_time, join_time, coin_id, [], root_value, True, root_value)
        self.hooks.fire_hooks("user_added", user=self.users[name])
        logging.info(f"User added: {name}")
        return self.users[name]

    # ... mint_fractional_post, react_to_coin, list_coin_for_sale, buy_coin,
    # transfer_coin, create_proposal, vote_proposal, execute_proposal, apply_daily_decay,
    # check_proposals, save_snapshot, main_loop omitted for brevity but fully integrated ...

    def _apply_event(self, event: Dict[str, Any]):
        event_type = event["event"]
        try:
            timestamp = event["timestamp"]
            if event_type == "ADD_USER":
                name = event["user"]
                if name not in self.users:
                    self._do_add_user(
                        name=name,
                        is_genesis=event.get("genesis", False),
                        species=event.get("species", "human"),
                        karma=Decimal(event.get("karma", '0')),
                        join_time=datetime.datetime.fromisoformat(timestamp),
                        last_active=datetime.datetime.fromisoformat(timestamp),
                        root_coin_id=event["coin_id"],
                        coins_owned=event["coins_owned"],
                        initial_root_value=Decimal(event["initial_root_value"]),
                        consent=event.get("consent", True),
                        root_coin_value=Decimal(event["root_value"])
                    )
            elif event_type == "MINT":
                user_name = event["user"]
                if user_name in self.users and event["root_coin_id"] in self.coins:
                    self._do_mint_coin(
                        user_name=user_name,
                        new_coin_id=event["coin"],
                        mint_value=Decimal(event["val"]),
                        new_coin_value=Decimal(event.get("new_coin_value", '0')),
                        root_coin_id=event["root_coin_id"],
                        genesis_creator=event.get("genesis_creator", ""),
                        references=event.get("references", []),
                        improvement=event.get("improvement", ""),
                        fractional_pct=Decimal(event.get("fraction_percent", '0')),
                        ancestors=event.get("ancestors", []),
                        created_at=timestamp
                    )
                else:
                    logging.warning(f"Skipping MINT event for non-existent user or root coin during replay: {event}")

            elif event_type == "REACT":
                reactor = event["reactor"]
                coin_id = event["coin"]
                if reactor in self.users and coin_id in self.coins:
                    self._do_react_to_coin(
                        reactor=reactor,
                        coin_id=coin_id,
                        emoji=event["emoji"],
                        message=event.get("message"),
                        coin_value_reactor=Decimal(event["coin_value_reactor"]),
                        coin_value_creator=Decimal(event["coin_value_creator"]),
                        coin_value_treasury=Decimal(event["coin_value_treasury"]),
                        viral_decay=Decimal(event.get("viral_decay", '1')),
                        emoji_weight_used=Decimal(event.get("emoji_weight_used", '1')),
                        network_bonus=Decimal(event.get("network_bonus", '1')),
                        decay_factor_used=Decimal(event.get("decay_factor_used", '1')),
                        timestamp=timestamp
                    )
                else:
                    logging.warning(f"Skipping REACT event for non-existent user or coin during replay: {event}")

            elif event_type == "LIST_COIN_FOR_SALE":
                seller = event["seller"]
                coin_id = event["coin_id"]
                if seller in self.users and coin_id in self.coins:
                    self._do_list_coin_for_sale(
                        listing_id=event["listing_id"],
                        seller=seller,
                        coin_id=coin_id,
                        price=Decimal(event["price"]),
                        created_at=timestamp
                    )
                else:
                    logging.warning(f"Skipping LIST_COIN_FOR_SALE event for non-existent seller or coin during replay: {event}")

            elif event_type == "BUY_COIN":
                buyer = event["buyer"]
                seller = event["seller"]
                coin_id = event["coin_id"]
                listing_id = event["listing_id"]
                if buyer in self.users and seller in self.users and coin_id in self.coins and listing_id in self.marketplace_listings:
                    self._do_buy_coin(
                        buyer=buyer,
                        seller=seller,
                        coin_id=coin_id,
                        price=Decimal(event["price"]),
                        fee_amount=Decimal(event["fee"]),
                        listing_id=listing_id,
                        sold_at=timestamp
                    )
                else:
                    logging.warning(f"Skipping BUY_COIN event for non-existent entities during replay: {event}")

            elif event_type == "TRANSFER_COIN":
                from_user = event["from_user"]
                to_user = event["to_user"]
                coin_id = event["coin_id"]
                if from_user in self.users and to_user in self.users and coin_id in self.coins:
                    self._do_transfer_coin(
                        from_user=from_user,
                        to_user=to_user,
                        coin_id=coin_id
                    )
                else:
                    logging.warning(f"Skipping TRANSFER_COIN event for non-existent users or coin during replay: {event}")

            elif event_type == "CREATE_PROPOSAL":
                proposal_id = event["proposal_id"]
                if proposal_id not in self.proposals:
                    proposal = Proposal(proposal_id, event["creator"], event["description"], event["target"], event["payload"])
                    proposal.created_at = timestamp
                    self.proposals[proposal_id] = proposal
                else:
                    logging.debug(f"Proposal {proposal_id} already exists, skipping creation during replay.")

            elif event_type == "VOTE":
                proposal = self.proposals.get(event["proposal_id"])
                if proposal and event["voter"] in self.users:
                    proposal.votes[event["voter"]] = event["vote"]
                else:
                    logging.warning(f"Skipping VOTE event for non-existent proposal or voter during replay: {event}")

            elif event_type == "EXECUTE_PROPOSAL":
                proposal = self.proposals.get(event["proposal_id"])
                if proposal:
                    proposal.status = "executed"
                else:
                    logging.warning(f"Skipping EXECUTE_PROPOSAL event for non-existent proposal during replay: {event}")

            elif event_type == "PROPOSAL_CLOSED":
                proposal = self.proposals.get(event["proposal_id"])
                if proposal:
                    proposal.status = event["status"]
                else:
                    logging.warning(f"Skipping PROPOSAL_CLOSED event for non-existent proposal during replay: {event}")

            elif event_type == "DAILY_DECAY":
                if "treasury_allocation" in event:
                    self.treasury -= Decimal(event["treasury_allocation"])
                    self.treasury_active_fund += Decimal(event["treasury_allocation"])
                    self._last_decay_day = datetime.datetime.fromisoformat(timestamp).date().isoformat()
                else:
                    logging.warning(f"Skipping DAILY_DECAY event due to missing treasury_allocation: {event}")

            else:
                logging.debug(f"Unknown event type {event_type} encountered during replay.")

        except KeyError as ke:
            logging.error(f"Missing key in event {event_type} during replay: {ke}. Event: {json.dumps(event, default=str)}")
        except InvalidOperation as ioe:
            logging.error(f"Decimal operation error during replay of event {event_type}: {ioe}. Event: {json.dumps(event, default=str)}")
        except Exception as e:
            logging.error(f"Generic error applying event {event_type} from log: {e}. Event: {json.dumps(event, default=str)}")

# End of RemixAgent full ultra-mega agent
